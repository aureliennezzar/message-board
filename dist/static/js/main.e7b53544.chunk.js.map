{"version":3,"sources":["scripts/firebase.js","components/MessageForm/MessageForm.js","components/Message/Message.js","components/MessagesList/MessagesList.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","db","firestore","MessageForm","storage","ref","useState","username","title","data","state","setState","handleChange","e","target","name","value","className","onSubmit","preventDefault","length","collection","add","time","Date","now","htmlFor","type","placeholder","onChange","Message","id","date","heure","meta","setMeta","useEffect","msgDate","dd","getDate","format","mm","getMonth","yyyy","getFullYear","hh","getHours","min","getMinutes","Number","prototype","this","slice","key","MessagesList","messages","setMessages","onSnapshot","querySnapshot","newMessages","forEach","doc","push","map","message","App","Boolean","window","location","hostname","match","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"6UAYAA,IAASC,cAVI,CACZC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAIYR,IAASS,KAAtB,IACMC,EAAKV,IAASW,YCkCZC,GDjCQZ,IAASa,UACEC,M,MCZd,WAAO,IAAD,EACCC,mBAAS,CAClCC,SAAU,GACVC,MAAO,GACPC,KAAM,KAJkB,mBAClBC,EADkB,KACXC,EADW,KAMjBJ,EAA0BG,EAA1BH,SAAUC,EAAgBE,EAAhBF,MAAOC,EAASC,EAATD,KAiBnBG,EAAe,SAACC,GACrBF,EAAS,2BACLD,GADI,kBAENG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAG5B,OACC,0BACCC,UAAU,eACVC,SAzBmB,SAACL,GACrBA,EAAEM,iBACEZ,EAASa,QAAUZ,EAAMY,QAAUX,EAAKW,QAC3CnB,EAAGoB,WAAW,YAAYC,IAAI,CAC7Bd,QACAD,WACAgB,KAAMC,KAAKC,MACXhB,SAGFE,EAAS,CACRJ,SAAU,GACVC,MAAO,GACPC,KAAM,OAaN,2BAAOiB,QAAQ,YAAf,qBACA,2BAAOC,KAAK,OAAOZ,KAAK,WAAWa,YAAY,gBAAaZ,MAAOT,EAAUsB,SAAUjB,IACvF,2BAAOc,QAAQ,SAAf,oBACA,2BAAOC,KAAK,OAAOZ,KAAK,QAAQa,YAAY,gBAAaZ,MAAOR,EAAOqB,SAAUjB,IACjF,2BAAOc,QAAQ,QAAf,SACA,8BAAUC,KAAK,OAAOZ,KAAK,OAAOa,YAAY,gBAAaZ,MAAOP,EAAMoB,SAAUjB,IAClF,4BAAQe,KAAK,UAAb,cCNYG,G,MAnCC,SAAC,GAAyC,IAAvCvB,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAAMsB,EAAe,EAAfA,GAAIR,EAAW,EAAXA,KAAW,EAChCjB,mBAAS,CAAE0B,KAAM,GAAIC,MAAO,KADI,mBACjDC,EADiD,KAC3CC,EAD2C,KAEhDH,EAAgBE,EAAhBF,KAAMC,EAAUC,EAAVD,MAiBd,OAhBAG,qBAAU,WACT,IACMC,EAAU,IAAIb,KAAKD,GACnBe,EAAKD,EAAQE,UAAUC,SACvBC,EAHS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG3EJ,EAAQK,YACpBC,EAAON,EAAQO,cACfC,EAAKR,EAAQS,WAAWN,SACxBO,EAAMV,EAAQW,aAAaR,SACjCL,EAAQ,CACPH,KAAK,GAAD,OAAKM,EAAL,YAAWG,EAAX,YAAiBE,GACrBV,MAAM,GAAD,OAAKY,EAAL,YAAWE,OAEf,IACHE,OAAOC,UAAUV,OAAS,WACzB,OAAQ,IAAMW,MAAMC,OAAO,IAEpB,oCACP,wBAAIC,IAAKtB,EAAId,UAAU,WACtB,0BAAMA,UAAU,mBACf,sCAAYT,GACZ,0BAAMS,UAAU,iBAAhB,MAED,uBAAGA,UAAU,gBAAb,eAAsCe,EAAtC,SAA+CC,EAA/C,QAA2D1B,GAC3D,0BAAMU,UAAU,sBAChB,uBAAGA,UAAU,gBACXR,OCFU6C,EAxBM,WAAO,IAAD,EACMhD,mBAAS,IADf,mBACnBiD,EADmB,KACTC,EADS,KAY1B,OAVApB,qBAAU,WACTnC,EAAGoB,WAAW,YAAYoC,YAAW,SAACC,GACrC,IAAMC,EAAc,GACpBD,EAAcE,SAAQ,SAACC,GAAS,IACvB9B,EAAO8B,EAAP9B,GACR4B,EAAYG,KAAZ,2BAAsBD,EAAIpD,QAA1B,IAAkCsB,WAEnCyB,EAAYG,QAEX,IAEF,6BAAS1C,UAAU,iBAClB,4BACEsC,EAASQ,KAAI,SAACC,GAAa,IACnBzD,EAAoCyD,EAApCzD,SAAUC,EAA0BwD,EAA1BxD,MAAOC,EAAmBuD,EAAnBvD,KAAMsB,EAAaiC,EAAbjC,GAAIR,EAASyC,EAATzC,KACnC,OAAO,kBAAC,EAAD,CAAShB,SAAUA,EAAUC,MAAOA,EAAOC,KAAMA,EAAMsB,GAAIA,EAAIR,KAAMA,UCNlE0C,MAVf,WACC,OACC,6BAAShD,UAAU,OAClB,6CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEiBiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,cAAc,UD6HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMlB,c","file":"static/js/main.e7b53544.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n// Your web app's Firebase configuration\r\nvar config = {\r\n\tapiKey: \"AIzaSyDvnNsNfAFLPvjEpWTHBkNwh3UkD2qeIP0\",\r\n\tauthDomain: \"message-board01.firebaseapp.com\",\r\n\tdatabaseURL: \"https://message-board01.firebaseio.com\",\r\n\tprojectId: \"message-board01\",\r\n\tstorageBucket: \"message-board01.appspot.com\",\r\n\tmessagingSenderId: \"557293432286\",\r\n\tappId: \"1:557293432286:web:3e1cd831602fd6c812414f\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(config);\r\nexport const auth = firebase.auth;\r\nexport const db = firebase.firestore();\r\nexport const storage = firebase.storage();\r\nexport const storageRef = storage.ref();","import React, { useState } from 'react';\r\nimport { db } from '../../scripts/firebase'\r\nimport \"./MessageForm.css\"\r\n\r\nconst MessageForm = () => {\r\n\tconst [state, setState] = useState({\r\n\t\tusername: \"\",\r\n\t\ttitle: \"\",\r\n\t\tdata: \"\"\r\n\t})\r\n\tconst { username, title, data } = state\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault()\r\n\t\tif (username.length && title.length && data.length) {\r\n\t\t\tdb.collection(\"messages\").add({\r\n\t\t\t\ttitle,\r\n\t\t\t\tusername,\r\n\t\t\t\ttime: Date.now(),\r\n\t\t\t\tdata\r\n\t\t\t})\r\n\t\t}\r\n\t\tsetState({\r\n\t\t\tusername: \"\",\r\n\t\t\ttitle: \"\",\r\n\t\t\tdata: \"\"\r\n\t\t})\r\n\t}\r\n\tconst handleChange = (e) => {\r\n\t\tsetState({\r\n\t\t\t...state,\r\n\t\t\t[e.target.name]: e.target.value\r\n\t\t})\r\n\t}\r\n\treturn (\r\n\t\t<form\r\n\t\t\tclassName=\"message-form\"\r\n\t\t\tonSubmit={handleSubmit}>\r\n\t\t\t<label htmlFor=\"username\">Nom d'utilisateur</label>\r\n\t\t\t<input type=\"text\" name=\"username\" placeholder=\"Écrire ici\" value={username} onChange={handleChange}></input>\r\n\t\t\t<label htmlFor=\"title\">Titre du message</label>\r\n\t\t\t<input type=\"text\" name=\"title\" placeholder=\"Écrire ici\" value={title} onChange={handleChange}></input>\r\n\t\t\t<label htmlFor=\"data\">Texte</label>\r\n\t\t\t<textarea type=\"text\" name=\"data\" placeholder=\"Écrire ici\" value={data} onChange={handleChange}></textarea>\r\n\t\t\t<button type=\"submit\">Envoyer</button>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default MessageForm;","import React, { useEffect, useState } from 'react';\r\nimport \"./Message.css\"\r\nconst Message = ({ username, title, data, id, time }) => {\r\n\tconst [meta, setMeta] = useState({ date: \"\", heure: \"\" })\r\n\tconst { date, heure } = meta\r\n\tuseEffect(() => {\r\n\t\tconst months = [\"Jan\", \"Fev\", \"Mar\", \"Avr\", \"Mai\", \"Jui\", \"Jul\", \"Aou\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",]\r\n\t\tconst msgDate = new Date(time)\r\n\t\tconst dd = msgDate.getDate().format()\r\n\t\tconst mm = months[msgDate.getMonth()]\r\n\t\tconst yyyy = msgDate.getFullYear()\r\n\t\tconst hh = msgDate.getHours().format()\r\n\t\tconst min = msgDate.getMinutes().format()\r\n\t\tsetMeta({\r\n\t\t\tdate: `${dd} ${mm} ${yyyy}`,\r\n\t\t\theure: `${hh}:${min}`\r\n\t\t})\r\n\t}, [])\r\n\tNumber.prototype.format = function () {\r\n\t\treturn ('0' + this).slice(-2)\r\n\t}\r\n\treturn (<>\r\n\t\t<li key={id} className=\"message\">\r\n\t\t\t<span className=\"message-bandeau\">\r\n\t\t\t\t<p>Titre : {title}</p>\r\n\t\t\t\t<span className=\"message-close\">X</span>\r\n\t\t\t</span>\r\n\t\t\t<p className=\"message-meta\">Posté le {date} à {heure} par {username}</p>\r\n\t\t\t<span className=\"message-separator\"></span>\r\n\t\t\t<p className=\"message-text\">\r\n\t\t\t\t{data}\r\n\t\t\t</p>\r\n\t\t</li>\r\n\t</>\r\n\t);\r\n}\r\n\r\nexport default Message;","import React, { useEffect, useState } from 'react';\r\nimport { db } from '../../scripts/firebase';\r\nimport Message from '../Message/Message';\r\n\r\nconst MessagesList = () => {\r\n\tconst [messages, setMessages] = useState([])\r\n\tuseEffect(() => {\r\n\t\tdb.collection(\"messages\").onSnapshot((querySnapshot) => {\r\n\t\t\tconst newMessages = []\r\n\t\t\tquerySnapshot.forEach((doc) => {\r\n\t\t\t\tconst { id } = doc\r\n\t\t\t\tnewMessages.push({ ...doc.data(), id })\r\n\t\t\t});\r\n\t\t\tsetMessages(newMessages)\r\n\t\t});\r\n\t}, [])\r\n\treturn (\r\n\t\t<section className=\"messages-list\">\r\n\t\t\t<ul>\r\n\t\t\t\t{messages.map((message) => {\r\n\t\t\t\t\tconst { username, title, data, id, time } = message\r\n\t\t\t\t\treturn <Message username={username} title={title} data={data} id={id} time={time} />\r\n\t\t\t\t})}\r\n\t\t\t</ul>\r\n\t\t</section>\r\n\t);\r\n}\r\n\r\nexport default MessagesList;","import React from 'react';\nimport './App.css';\nimport MessageForm from './components/MessageForm/MessageForm';\nimport MessagesList from './components/MessagesList/MessagesList';\n\nfunction App() {\n\treturn (\n\t\t<section className=\"App\">\n\t\t\t<h1>Message Board</h1>\n\t\t\t<MessageForm />\n\t\t\t<MessagesList />\n\t\t</section>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.querySelector('#root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}